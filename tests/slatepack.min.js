"use strict";class Slatepack{static publicKeyToSlatepackAddress(e){return bech32.encode(Consensus.SLATEPACK_ADDRESS_HUMAN_READABLE_PART,bech32.toWords(e))}static slatepackAddressToPublicKey(e){try{var a=bech32.decode(e)}catch(e){throw"Invalid Slatepack address."}var r=bech32.fromWords(a.words);if(r.length!==Crypto.ED25519_PUBLIC_KEY_LENGTH)throw"Invalid Slatepack address.";if(a.prefix!==Consensus.SLATEPACK_ADDRESS_HUMAN_READABLE_PART)throw"Invalid Slatepack address.";return new Uint8Array(r)}static encryptMessage(e,a,r){return new Promise((function(t,c){var s=X25519.secretKeyFromEd25519SecretKey(e);s===X25519.OPERATION_FAILED&&c("Invalid secret key.");var A=X25519.publicKeyFromEd25519PublicKey(a);A===X25519.OPERATION_FAILED&&c("Invalid public key.");var E=X25519.sharedKeyFromSecretKeyAndPublicKey(s,A);if(E===X25519.OPERATION_FAILED)c("Creating shared key failed.");else if(0!==r.length){var i=new Uint8Array(Slatepack.NONCE_LENGTH);crypto.getRandomValues(i);try{var n=chacha.createCipher(E,i);n.setAAD(Slatepack.AAD_VALUE);var d=n.update(r);n.end();var l=n.getAuthTag();d=Common.mergeArrays([d,l])}catch(e){return void c("Encrypting message failed.")}t([i,d])}else c("Invalid message.")}))}static decryptMessage(e,a,r,t){return new Promise((function(c,s){var A=X25519.secretKeyFromEd25519SecretKey(e);A===X25519.OPERATION_FAILED&&s("Invalid secret key.");var E=X25519.publicKeyFromEd25519PublicKey(a);E===X25519.OPERATION_FAILED&&s("Invalid public key.");var i=X25519.sharedKeyFromSecretKeyAndPublicKey(A,E);if(i===X25519.OPERATION_FAILED)s("Creating shared key failed.");else if(r.length>Slatepack.TAG_LENGTH){try{var n=chacha.createDecipher(i,t);n.setAAD(Slatepack.AAD_VALUE),n.setAuthTag(r.subarray(r.length-Slatepack.TAG_LENGTH));var d=n.update(r.subarray(0,r.length-Slatepack.TAG_LENGTH));n.end()}catch(e){return void s("Decrypting message failed.")}c(d)}else s("Invalid encrypted message.")}))}static get ENCRYPTED_MESSAGE_NONCE_INDEX(){return 0}static get ENCRYPTED_MESSAGE_DATA_INDEX(){return Slatepack.ENCRYPTED_MESSAGE_NONCE_INDEX+1}static get NONCE_LENGTH(){return 12}static get TAG_LENGTH(){return 16}static get AAD_VALUE(){return new Uint8Array([])}}