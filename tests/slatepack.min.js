"use strict";class Slatepack{static publicKeyToSlatepackAddress(e){return bech32.encode(Consensus.SLATEPACK_ADDRESS_HUMAN_READABLE_PART,bech32.toWords(e))}static slatepackAddressToPublicKey(e){try{var a=bech32.decode(e)}catch(e){throw"Invalid Slatepack address."}var r=bech32.fromWords(a.words);if(r.length!==Crypto.ED25519_PUBLIC_KEY_LENGTH)throw"Invalid Slatepack address.";if(a.prefix!==Consensus.SLATEPACK_ADDRESS_HUMAN_READABLE_PART)throw"Invalid Slatepack address.";return new Uint8Array(r)}static encryptMessage(e,a,r){return new Promise((function(t,l){var c=X25519.secretKeyFromEd25519SecretKey(e);c===X25519.OPERATION_FAILED&&l("Invalid secret key.");var i=X25519.publicKeyFromEd25519PublicKey(a);i===X25519.OPERATION_FAILED&&(c.fill(0),l("Invalid public key."));var s=X25519.sharedKeyFromSecretKeyAndPublicKey(c,i);if(s===X25519.OPERATION_FAILED)c.fill(0),l("Creating shared key failed.");else if(c.fill(0),0!==r.length){var A=new Uint8Array(Slatepack.NONCE_LENGTH);crypto.getRandomValues(A);try{var E=chacha.createCipher(s,A);E.setAAD(Slatepack.AAD_VALUE);var n=E.update(r);E.end();var d=E.getAuthTag();n=Common.mergeArrays([n,d])}catch(e){return s.fill(0),void l("Encrypting message failed.")}s.fill(0),t([A,n])}else s.fill(0),l("Invalid message.")}))}static decryptMessage(e,a,r,t){return new Promise((function(l,c){var i=X25519.secretKeyFromEd25519SecretKey(e);i===X25519.OPERATION_FAILED&&c("Invalid secret key.");var s=X25519.publicKeyFromEd25519PublicKey(a);s===X25519.OPERATION_FAILED&&(i.fill(0),c("Invalid public key."));var A=X25519.sharedKeyFromSecretKeyAndPublicKey(i,s);if(A===X25519.OPERATION_FAILED)i.fill(0),c("Creating shared key failed.");else if(i.fill(0),r.length>Slatepack.TAG_LENGTH){try{var E=chacha.createDecipher(A,t);E.setAAD(Slatepack.AAD_VALUE),E.setAuthTag(r.subarray(r.length-Slatepack.TAG_LENGTH));var n=E.update(r.subarray(0,r.length-Slatepack.TAG_LENGTH));E.end()}catch(e){return A.fill(0),void c("Decrypting message failed.")}A.fill(0),l(n)}else A.fill(0),c("Invalid encrypted message.")}))}static get ENCRYPTED_MESSAGE_NONCE_INDEX(){return 0}static get ENCRYPTED_MESSAGE_DATA_INDEX(){return Slatepack.ENCRYPTED_MESSAGE_NONCE_INDEX+1}static get NONCE_LENGTH(){return 12}static get TAG_LENGTH(){return 16}static get AAD_VALUE(){return new Uint8Array([])}}