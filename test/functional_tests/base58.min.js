"use strict";const sha256=require("./js-sha256-0.9.0.min.js"),Common=require("./common.min.js");class Base58{static encode(e){for(var r=0;r<e.length&&0===e[r];)++r;for(var a=Math.ceil((e.length-r)*Base58.BYTES_PER_LENGTH_IN_NEW_BASE),t=new Uint8Array(a).fill(0),s=0,E=r;E<e.length;++E){for(var n=e[E],o=0,B=a-1;(0!==n||o<s)&&B>=0;++o,--B)n+=(Common.BYTE_MAX_VALUE+1)*t[B],t[B]=n%Base58.NUMBER_BASE,n=Math.floor(n/Base58.NUMBER_BASE);s=o}for(var _=a-s;_<t.length&&0===t[_];)++_;for(var h=Base58.CHARACTERS[0].repeat(r);_<t.length;++_)h+=Base58.CHARACTERS[t[_]];return h}static encodeWithChecksum(e){var r=Base58.getChecksum(e);return Base58.encode(Common.mergeArrays([e,r]))}static decode(e){for(var r=0;r<e.length&&e[r]===Base58.CHARACTERS[0];)++r;for(var a=Math.ceil((e.length-r)*Base58.BYTES_PER_LENGTH_IN_OLD_BASE),t=new Uint8Array(a).fill(0),s=0,E=r;E<e.length;++E){var n=Base58.CHARACTERS.indexOf(e[E]);if(n===Common.INDEX_NOT_FOUND)throw"Invalid base58 string.";for(var o=0,B=a-1;(0!==n||o<s)&&B>=0;++o,--B)n+=Base58.NUMBER_BASE*t[B],t[B]=n%(Common.BYTE_MAX_VALUE+1),n=Math.floor(n/(Common.BYTE_MAX_VALUE+1));s=o}for(var _=a-s;_<t.length&&0===t[_];)++_;var h=new Uint8Array(r+a-_).fill(0);for(E=0;_<t.length;++E,++_)h[E+r]+=t[_];return h}static decodeWithChecksum(e){try{var r=Base58.decode(e)}catch(e){throw e}if(r.length<Base58.CHECKSUM_LENGTH)throw"No checksum exists.";var a=Base58.getChecksum(r.subarray(0,r.length-Base58.CHECKSUM_LENGTH)),t=r.subarray(r.length-Base58.CHECKSUM_LENGTH);if(!1===Common.arraysAreEqual(a,t))throw"Invalid checksum.";return r.subarray(0,r.length-Base58.CHECKSUM_LENGTH)}static getChecksum(e){return new Uint8Array(sha256.arrayBuffer(new Uint8Array(sha256.arrayBuffer(e)))).subarray(0,Base58.CHECKSUM_LENGTH)}static get CHARACTERS(){return"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"}static get NUMBER_BASE(){return 58}static get BYTES_PER_LENGTH_IN_NEW_BASE(){return Math.log(Common.BYTE_MAX_VALUE+1)/Math.log(Base58.NUMBER_BASE)}static get BYTES_PER_LENGTH_IN_OLD_BASE(){return Math.log(Base58.NUMBER_BASE)/Math.log(Common.BYTE_MAX_VALUE+1)}static get CHECKSUM_LENGTH(){return 4}}module.exports=Base58;