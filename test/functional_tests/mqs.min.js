"use strict";const crypto=require("crypto"),Secp256k1Zkp=require("./secp256k1-zkp.min.js"),chacha=require("./ChaCha-2.1.0.min.js"),Common=require("./common.min.js"),Consensus=require("./consensus.min.js"),Base58=require("./base58.min.js");class Mqs{static publicKeyToMqsAddress(e,t){var r=Mqs.getAddressVersion(t);return Base58.encodeWithChecksum(Common.mergeArrays([r,e]))}static mqsAddressToPublicKey(e,t){try{var r=Base58.decodeWithChecksum(e)}catch(e){throw"Invalid MQS address."}var n=Mqs.getAddressVersion(t);if(r.length!==n.length+Crypto.SECP256K1_PUBLIC_KEY_LENGTH)throw"Invalid MQS address.";if(!1===Common.arraysAreEqual(r.subarray(0,n.length),n))throw"Invalid MQS address.";if(!1===Secp256k1Zkp.isValidPublicKey(r.subarray(n.length)))throw"Invalid MQS address.";return r.subarray(n.length)}static encrypt(e,t,r){return new Promise((function(n,a){var s=Secp256k1Zkp.publicKeyTweakMultiply(t,e);if(s===Secp256k1Zkp.OPERATION_FAILED)a("Creating shared secret key failed.");else{if(!1===Common.arraysAreEqual(s,new Uint8Array(s.length).fill(0)))return crypto.subtle.importKey("raw",s.subarray(1),{name:Mqs.IMPORT_ALGORITHM},!1,["deriveKey"]).then((function(e){s.fill(0);var t=new Uint8Array(Mqs.SALT_LENGTH);return crypto.getRandomValues(t),crypto.subtle.deriveKey({name:Mqs.IMPORT_ALGORITHM,salt:t,iterations:Mqs.DIGEST_NUMBER_OF_ITERATIONS,hash:Mqs.DIGEST_ALGORITHM},e,{name:Mqs.ENCRYPTION_ALGORITHM,length:Mqs.ENCRYPTION_KEY_LENGTH},!0,["encrypt","decrypt"]).then((function(e){return crypto.subtle.exportKey("raw",e).then((function(e){if(e=new Uint8Array(e),0!==r.length){var s=new Uint8Array(Mqs.NONCE_LENGTH);crypto.getRandomValues(s);try{var i=chacha.createCipher(e,s);i.setAAD(Mqs.AAD_VALUE);var c=i.update(r);i.end();var l=i.getAuthTag();c=Common.mergeArrays([c,l])}catch(t){return e.fill(0),void a("Encrypting data failed.")}e.fill(0),n([t,s,c])}else e.fill(0),a("Invalid data.")})).catch((function(e){a(e)}))})).catch((function(e){a(e)}))})).catch((function(e){s.fill(0),a(e)}));s.fill(0),a("Invalid shared secret key")}}))}static decrypt(e,t,r,n,a){return new Promise((function(s,i){var c=Secp256k1Zkp.publicKeyTweakMultiply(t,e);if(c===Secp256k1Zkp.OPERATION_FAILED)i("Creating shared secret key failed.");else{if(!1===Common.arraysAreEqual(c,new Uint8Array(c.length).fill(0)))return crypto.subtle.importKey("raw",c.subarray(1),{name:Mqs.IMPORT_ALGORITHM},!1,["deriveKey"]).then((function(e){return c.fill(0),crypto.subtle.deriveKey({name:Mqs.IMPORT_ALGORITHM,salt:n,iterations:Mqs.DIGEST_NUMBER_OF_ITERATIONS,hash:Mqs.DIGEST_ALGORITHM},e,{name:Mqs.ENCRYPTION_ALGORITHM,length:Mqs.ENCRYPTION_KEY_LENGTH},!0,["encrypt","decrypt"]).then((function(e){return crypto.subtle.exportKey("raw",e).then((function(e){if(e=new Uint8Array(e),r.length>Mqs.TAG_LENGTH){try{var t=chacha.createDecipher(e,a);t.setAAD(Mqs.AAD_VALUE),t.setAuthTag(r.subarray(r.length-Mqs.TAG_LENGTH));var n=t.update(r.subarray(0,r.length-Mqs.TAG_LENGTH));t.end()}catch(t){return e.fill(0),void i("Decrypting data failed.")}e.fill(0),s(n)}else e.fill(0),i("Invalid encrypted data.")})).catch((function(e){i(e)}))})).catch((function(e){i(e)}))})).catch((function(e){c.fill(0),i(e)}));c.fill(0),i("Invalid shared secret key")}}))}static get ADDRESS_LENGTH(){return 52}static get ENCRYPTED_DATA_SALT_INDEX(){return 0}static get ENCRYPTED_DATA_NONCE_INDEX(){return Mqs.ENCRYPTED_DATA_SALT_INDEX+1}static get ENCRYPTED_DATA_DATA_INDEX(){return Mqs.ENCRYPTED_DATA_NONCE_INDEX+1}static getAddressVersion(e){if(Consensus.getWalletType()===Consensus.MWC_WALLET_TYPE)return!0===e?new Uint8Array([1,69]):new Uint8Array([1,121])}static get IMPORT_ALGORITHM(){return"PBKDF2"}static get ENCRYPTION_ALGORITHM(){return"AES-GCM"}static get ENCRYPTION_KEY_LENGTH(){return 256}static get DIGEST_ALGORITHM(){return"SHA-512"}static get DIGEST_NUMBER_OF_ITERATIONS(){return 100}static get SALT_LENGTH(){return 8}static get NONCE_LENGTH(){return 12}static get TAG_LENGTH(){return 16}static get AAD_VALUE(){return new Uint8Array([])}}module.exports=Mqs;